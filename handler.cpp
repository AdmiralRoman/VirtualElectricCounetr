#include "handler.h"

using json = nlohmann::json;
std::vector <uint8_t> sendbuf;

DataBase::DataBase() {
	json data;
    std::ifstream f("in.json");
	if (!f.is_open()) {
        throw std::runtime_error("Unable to open file");
    }
	try {
    data = json::parse(f);
	} catch (json::parse_error& e)
	{
		throw std::runtime_error("JSON parsing error: " + std::string(e.what()));
	}
    valueEC = data.at("params");
    vvalue = data.at("values");
	f.close();
}

int DataBase::readDataInt(const std::string& mapKey) const {
    auto found = valueEC.find(mapKey);
    auto value = 0;
    if (found != valueEC.end()) value = found->second;
    return value;
}

std::array<int,4> DataBase::readDataArray(const std::string& mapKey) const {
    auto found = vvalue.find(mapKey);
    std::array<int,4> lString;
    if (found != vvalue.end()) lString = found->second;
    return lString;
}



CRC::CRC():
    auchCRCHi {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40
    },

    /* Table of CRC values for lowâ€“order byte */
    auchCRCLo  {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
    0x40

    },
    checkCrc(false),
    uchCRCLo(0xFF),
    uchCRCHi(0xFF) {}
   
void CRC::Crc16(const std::vector<unsigned char>& crcSum){
    uchCRCLo = 0xFF;
    uchCRCHi = 0xFF;
    unsigned char index;
    for (const auto& byte : crcSum) {
        index = uchCRCLo ^ byte;
        uchCRCLo = uchCRCHi ^ auchCRCHi[index];
        uchCRCHi = auchCRCLo[index];
    }
}

void CRC::retCrc(std::vector<unsigned char>& crcSum) const {
    crcSum.push_back(uchCRCLo);
    crcSum.push_back(uchCRCHi);
}



void CRC::testCrc() const {
    std::cout << std::hex << static_cast<int> (uchCRCLo) << std::endl;
    std::cout << std::hex << static_cast<int> (uchCRCHi) << std::endl;
    
}

DataBase dataBase;
uint8_t adr = dataBase.readDataInt("adr");

int myPow(int x, int p) 
{
	int i = 1;
	for (int j = 1; j <= p; j++)  i *= x;
	return i;
}

void varIsp() //EC model settings
{  
	sendbuf.push_back(0xB4);
	sendbuf.push_back(0xE3);
	sendbuf.push_back(0xC2);
	sendbuf.push_back(0x97);
	sendbuf.push_back(0xDF);
	sendbuf.push_back(0x58);
}

bool Handling::checkAdr(const std::vector<uint8_t>& procVector) 
{
	int tempAdr = static_cast<int> (procVector[0]);
	if ( tempAdr != adr || tempAdr != 0) 
	{
		return false;
	}
	sendbuf.push_back(adr);
	return true;
}

void Handling::switchRule(std::vector<uint8_t>& procVector) 
{
	paramRead = static_cast<int> (procVector[1]);
	switch (paramRead)
	{
		case 0: //test  connection
		case 1: //open connection
		case 2: //close connection
		case 3:
			sendbuf.push_back(0x00);
			break;
		case 5: //get energy values "all time"
			getValuesFromArray(2,3,procVector);
			break;
		case 6: //get energy values "month" "yesterday"
			getValuesFromArray(3,4,procVector);
			break;
		case 8: 
			getParamsEC(procVector);
			break;
		default:
			break;

	}
}

void Handling::writeIntToVector(int valueDB,int bytesLen, std::vector<uint8_t>& lastVector) 
{
	std::vector<uint8_t> tmpVector;

	for (int i = bytesLen-1 ; i >= 0; i--)
	{
		int tm = valueDB >> (i * 8) & 0xFF;
		tmpVector.push_back(tm);
	}
	if (bytesLen == 4)
	{
		std::swap(tmpVector[0], tmpVector[1]);
		std::swap(tmpVector[2], tmpVector[3]);
	}
	else if (bytesLen == 2) std::swap(tmpVector[0], tmpVector[1]);
	else if (bytesLen == 3) std::swap(tmpVector[1], tmpVector[2]);
	
	for (auto i : tmpVector) lastVector.push_back(i);	
}

void Handling::writeIntToVectorCol(int valueDB, int bytesLen, std::vector<uint8_t>&lastVector) 
{
	bytesLen--;
	for (bytesLen; bytesLen >= 0; bytesLen--)
	{
		int tmp = valueDB / myPow(100,bytesLen);
		lastVector.push_back(tmp & 0xFF);
		valueDB = valueDB % myPow(100, bytesLen);
	}
}

void Handling::arrayToIntVector(const std::string &mapKey,int size) 	
{
	std::array<int,4> tmp{};
	tmp = dataBase.readDataArray(mapKey);
	for (int i = 0;i<size; i++)
	{
			tempVector.push_back(tmp[i]);
	}
}

void Handling::getValuesFromArray(int arg1,int arg2,std::vector<uint8_t>&lastVector)
{
	std::string key = std::to_string(static_cast<int> (lastVector[arg1])) + std::to_string(static_cast<int> (lastVector[arg2]));
	arrayToIntVector(key,4);
	for (auto i : tempVector)
	{
		writeIntToVector(i, 4, sendbuf);
	}
	tempVector.clear();
	key.clear();
}

void Handling::getParamsEC(const std::vector<uint8_t>& procVector) {
    switch (static_cast<int>(procVector[2])) 
	{
        case 0:
            writeIntToVectorCol(dataBase.readDataInt("sn"), 4, sendbuf);
            writeIntToVectorCol(dataBase.readDataInt("date"), 3, sendbuf);
            break;
        case 1:
            writeIntToVectorCol(dataBase.readDataInt("sn"), 4, sendbuf);
            writeIntToVectorCol(dataBase.readDataInt("date"), 3, sendbuf);
            writeIntToVectorCol(dataBase.readDataInt("ver"), 3, sendbuf);
            varIsp();
            getCrc();
            writeIntToVectorCol(dataBase.readDataInt("varI"), 3, sendbuf);
            sendbuf.insert(sendbuf.end(), {0x00, 0x00, 0x00});
            break;
        case 2:
            writeIntToVectorCol(dataBase.readDataInt("Kn"), 2, sendbuf);
            writeIntToVectorCol(dataBase.readDataInt("Kt"), 2, sendbuf);
            break;
        case 3:
            writeIntToVectorCol(dataBase.readDataInt("ver"), 3, sendbuf);
            break;
        case 5:
            sendbuf.push_back(0x00);
            sendbuf.push_back(adr);
            break;
        case 17:
            getInstantValues(procVector);
            break;
        case 18:
            varIsp();
            break;
        case 38:
            getCrc();
            break;
        default:
            break;
    }
}

void Handling::getCrc() {
    std::vector<uint8_t> tempVec{};
    writeIntToVectorCol(dataBase.readDataInt("ver"), 3, tempVec);
    CRC crc;
    crc.Crc16(tempVec);
    crc.retCrc(sendbuf);
}

void Handling::getInstantValues(const std::vector<uint8_t>& procVector) {
    int tempHbit = static_cast<int>(procVector[3]) >> 4;
    int tempLbit = static_cast<int>(procVector[3]) % 16;
    std::vector<std::string> tmpVec{"P", "U", "I", "KP", "f", "a", "Kis", "t", "Uab", "inP", "inQ", "inS"};
    int tempbuf = 1; 
    int counter = 3; //size of value of array in byte
    int byte = 3; //size if value in sendbuf in byte

    if (tempHbit == 0) {
        counter = 4;
        {
			tempHbit = 11;
			tempbuf = 8;
		}
		if (tempLbit > 3 && tempLbit < 8)
		{
			tempHbit = 10;
			tempbuf = 4;
		}
		if (tempLbit < 4) 
		{
			tempHbit = 9;
			tempbuf = 0;
		}
    }
    if (tempHbit == 6) byte = 2;
    if (tempHbit == 4) tempbuf = 0;    
    if (tempHbit == 3) 
    {
        counter = 4;
        tempbuf = 0;
    }
    if (tempHbit != 0 && tempHbit != 7) 
    {
        arrayToIntVector(tmpVec[tempHbit], counter);
		writeIntToVector(tempVector[tempLbit-tempbuf], byte, sendbuf);
		tempVector.clear();
    }

    if (tempHbit == 7) //fixing bug of configurator programm with temperature
    {
        byte = 2;
        arrayToIntVector(tmpVec[tempHbit], counter);
        writeIntToVectorCol(tempVector[tempLbit], byte, sendbuf);
		tempVector.clear();
    }
}
